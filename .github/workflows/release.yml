name: Release

on:
  push:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.repository_owner != 'dependabot[bot]'
    outputs:
      version: ${{ steps.semantic.outputs.new_release_version }}
      published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 22
          extra_plugins: |
            @semantic-release/changelog@6.0.3
            @semantic-release/git@10.0.1
            @semantic-release/github@9.2.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    name: Build and Upload Assets
    runs-on: ${{ matrix.os }}
    needs: release
    if: needs.release.outputs.published == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: grafana-runner-linux
          - os: windows-latest
            asset_name: grafana-runner-windows
          - os: macos-latest
            asset_name: grafana-runner-macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          pyinstaller --onefile --name ${{ matrix.asset_name }} grafana_runner.py
          chmod +x dist/${{ matrix.asset_name }}

      - name: Build executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --name ${{ matrix.asset_name }}.exe grafana_runner.py

      - name: Create release package (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release-package
          cp dist/${{ matrix.asset_name }} release-package/
          cp config.json release-package/
          cp README.md release-package/
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cp install.sh release-package/
            cp run.sh release-package/
          else
            cp install.sh release-package/
            cp run.sh release-package/
          fi
          tar -czf ${{ matrix.asset_name }}-v${{ needs.release.outputs.version }}.tar.gz -C release-package .

      - name: Create release package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir release-package
          copy "dist\${{ matrix.asset_name }}.exe" release-package\
          copy config.json release-package\
          copy README.md release-package\
          copy install.bat release-package\
          copy run.bat release-package\
          tar -czf ${{ matrix.asset_name }}-v${{ needs.release.outputs.version }}.tar.gz -C release-package .

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.release.outputs.version }}
          files: ${{ matrix.asset_name }}-v${{ needs.release.outputs.version }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, build-and-upload]
    if: needs.release.outputs.published == 'true'
    steps:
      - name: Notify success
        run: |
          echo "ðŸŽ‰ Successfully released version ${{ needs.release.outputs.version }}"
          echo "ðŸ“¦ Release artifacts uploaded to GitHub Releases"
