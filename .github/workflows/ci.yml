name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Black
        run: black --check --diff . --line-length=88

      - name: Run isort
        run: isort --check-only --diff .

      - name: Run flake8
        run: flake8 . --max-line-length=88 --extend-ignore=E203,W503,E501,E402

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests
        run: pytest -v --cov=grafana_runner --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  validate-config:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate config.json
        run: |
          python -c "
          import json
          import sys
          try:
              with open('config.json', 'r') as f:
                  config = json.load(f)

              # Basic validation
              assert 'panels' in config, 'Missing panels key'
              assert 'browser_settings' in config, 'Missing browser_settings key'
              assert len(config['panels']) > 0, 'No panels configured'

              for i, panel in enumerate(config['panels']):
                  assert 'url' in panel, f'Panel {i} missing URL'
                  assert 'duration' in panel, f'Panel {i} missing duration'
                  assert isinstance(panel['duration'], (int, float)), f'Panel {i} duration must be numeric'

                  # Validate variables if present
                  if 'variables' in panel:
                      assert isinstance(panel['variables'], dict), f'Panel {i} variables must be a dictionary'
                      for var_name, var_values in panel['variables'].items():
                          assert isinstance(var_values, list), f'Panel {i} variable \"{var_name}\" must be a list'
                          assert len(var_values) > 0, f'Panel {i} variable \"{var_name}\" cannot be empty'

              print('✅ Configuration is valid')
          except Exception as e:
              print(f'❌ Configuration validation failed: {e}')
              sys.exit(1)
          "
